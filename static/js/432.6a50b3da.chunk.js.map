{"version":3,"file":"static/js/432.6a50b3da.chunk.js","mappings":"yOAGaA,EAAYC,EAAAA,GAAAA,EAAH,uCAITC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,6d,mICDjBG,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaE,SAAS,qBAC7BC,SAAUH,EAAAA,KACPI,IAAI,EAAG,iDACPF,SAAS,wBACZG,KAAML,EAAAA,KAAaE,SAAS,sBAGf,SAASI,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CAAER,MAAO,GAAIE,SAAU,GAAIE,KAAM,IAChDN,iBAAkBA,EAClBW,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBL,EAASM,EAAAA,EAAAA,SAAwBF,IACjCC,GACD,EANH,UAQE,UAAC,IAAD,CAAYE,aAAa,MAAzB,WACE,kBAAOC,QAAQ,OAAf,mBACA,SAAC,KAAD,CAAOC,KAAK,OAAOX,KAAK,OAAOH,UAAQ,KACvC,SAAC,KAAD,CACEG,KAAK,OACLY,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,GAAhB,KAEjB,kBAAOH,QAAQ,QAAf,oBACA,SAAC,KAAD,CAAOC,KAAK,QAAQX,KAAK,QAAQH,UAAQ,KACzC,SAAC,KAAD,CACEG,KAAK,QACLY,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,GAAhB,KAGjB,kBAAOH,QAAQ,WAAf,uBACA,SAAC,KAAD,CAAOC,KAAK,WAAWX,KAAK,WAAWH,UAAQ,KAC/C,SAAC,KAAD,CACEG,KAAK,WACLY,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,GAAhB,KAGjB,mBAAQF,KAAK,SAAb,yBAKT,C","sources":["components/Form/MyForm.styled.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 200px;\n  margin-left: auto;\n  margin-right: auto;\n  label {\n    margin-top: 10px;\n    margin-bottom: 5px;\n  }\n  input {\n    margin-bottom: 10px;\n  }\n  button {\n    margin-top: 10px;\n    border-radius: 5px;\n    background-color: transparent;\n    cursor: pointer;\n    padding: 5px;\n    :hover,\n    :focus {\n      background-color: orange;\n    }\n  }\n`;","import { StyledForm, ErrorText } from '../components/Form/MyForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport authOperations from '../redux/auth/auth-operations';\n\nconst validationSchema = Yup.object({\n  email: Yup.string().required('Email is required'),\n  password: Yup.string()\n    .min(7, 'Password must be at least 8 characters long..')\n    .required('Password is required'),\n  name: Yup.string().required('Name is required'),\n});\n\nexport default function RegisterPage() {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ email: '', password: '', name: '' }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { resetForm }) => {\n          dispatch(authOperations.register(values));\n          resetForm();\n        }}\n      >\n        <StyledForm autoComplete=\"off\">\n          <label htmlFor=\"name\">Name</label>\n          <Field type=\"text\" name=\"name\" required />\n          <ErrorMessage\n            name=\"name\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <Field type=\"email\" name=\"email\" required />\n          <ErrorMessage\n            name=\"email\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n\n          <label htmlFor=\"password\">Password</label>\n          <Field type=\"password\" name=\"password\" required />\n          <ErrorMessage\n            name=\"password\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n\n          <button type=\"submit\">LogIn</button>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n}"],"names":["ErrorText","styled","StyledForm","Form","validationSchema","Yup","email","required","password","min","name","RegisterPage","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","authOperations","autoComplete","htmlFor","type","render","message"],"sourceRoot":""}