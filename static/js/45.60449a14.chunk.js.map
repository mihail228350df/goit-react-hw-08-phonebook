{"version":3,"file":"static/js/45.60449a14.chunk.js","mappings":"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","sources":["components/Form/MyForm.styled.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Form/MyForm.jsx","../node_modules/nanoid/index.browser.js","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 200px;\n  margin-left: auto;\n  margin-right: auto;\n  label {\n    margin-top: 10px;\n    margin-bottom: 5px;\n  }\n  input {\n    margin-bottom: 10px;\n  }\n  button {\n    margin-top: 10px;\n    border-radius: 5px;\n    background-color: transparent;\n    cursor: pointer;\n    padding: 5px;\n    :hover,\n    :focus {\n      background-color: orange;\n    }\n  }\n`;","import { StyledList } from 'components/StyledComponent';\nimport styled from 'styled-components';\n\nexport const ContactsStyledList = styled(StyledList)`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid black;\n    margin: 0 auto 5px auto;\n    padding: 5px;\n    button {\n      display: inline-block;\n      border-radius: 5px;\n      background-color: transparent;\n      cursor: pointer;\n      padding: 5px;\n      :hover,\n      :focus {\n        background-color: orange;\n      }\n    }\n  }\n`;","import { ContactsStyledList } from './ContactsList.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useEffect } from 'react';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contactsArray = useSelector(contactsSelectors.getContactsArray);\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contactsArray.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return visibleContacts;\n  };\n\n  const contactsItems = getVisibleContacts().map(({ name, id, number }) => {\n    return (\n      <li key={id} id={id} name={name}>\n        {name}: {number}\n        <button\n          type=\"button\"\n          onClick={() => dispatch(contactsOperations.delContact(id))}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n\n  return <ContactsStyledList>{contactsItems}</ContactsStyledList>;\n};","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 200px;\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  label {\n    margin-bottom: 5px;\n  }\n  input {\n    margin-bottom: 10px;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\n// import { chagneFilter, getFilter } from '../../redux/contacts/slice';\nimport { chaigeFilter } from 'redux/contacts/contacts-slice';\nimport { contactsSelectors } from 'redux/contacts';\n\nimport { FilterStyled } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const valueFilter = useSelector(contactsSelectors.getFilter);\n\n  return (\n    <FilterStyled>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        name=\"filter\"\n        type=\"text\"\n        value={valueFilter}\n        onChange={e => dispatch(chaigeFilter(e.currentTarget.value))}\n      />\n    </FilterStyled>\n  );\n};","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContacts, getContactsArray } from '../../redux/contacts/slice';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nimport { StyledForm, ErrorText } from './MyForm.styled';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Name is required'),\n  number: Yup.string().required('Number is required'),\n});\n\nexport const MyForm = () => {\n  const dispatch = useDispatch();\n  const contactsArray = useSelector(contactsSelectors.getContactsArray);\n\n  const addConntacts = value => {\n    const nameLowerCase = value.name.toLowerCase();\n\n    const newContact = contactsArray.find(\n      contact => contact.name.toLocaleLowerCase() === nameLowerCase\n    );\n\n    if (newContact) {\n      window.alert(`${value.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(value));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', id: '', number: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        values.id = nanoid();\n        addConntacts(values);\n        resetForm();\n      }}\n    >\n      <StyledForm autoComplete=\"off\">\n        <label htmlFor=\"name\">Name</label>\n        <Field\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <ErrorMessage\n          name=\"name\"\n          render={message => <ErrorText>{message}</ErrorText>}\n        />\n\n        <label htmlFor=\"number\">Number</label>\n        <Field\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <ErrorMessage\n          name=\"number\"\n          render={message => <ErrorText>{message}</ErrorText>}\n        />\n\n        <button type=\"submit\">Add contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { Box, StyledTitle } from '../components/StyledComponent';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { Filter } from '../components/Filter/Filter';\nimport { MyForm } from '../components/Form/MyForm';\n\nexport default function ContactsPage() {\n  return (\n    <Box as=\"main\" p={4}>\n      <StyledTitle>Contacts</StyledTitle>\n\n      <MyForm />\n\n      <Filter />\n      <ContactsList />\n    </Box>\n  );\n}"],"names":["ErrorText","styled","StyledForm","Form","ContactsStyledList","StyledList","ContactsList","dispatch","useDispatch","contactsArray","useSelector","contactsSelectors","filter","useEffect","contactsOperations","contactsItems","normalizedFilter","toLowerCase","contact","name","includes","getVisibleContacts","map","id","number","type","onClick","FilterStyled","Filter","valueFilter","htmlFor","value","onChange","e","chaigeFilter","currentTarget","validationSchema","Yup","required","MyForm","initialValues","onSubmit","values","resetForm","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","nameLowerCase","find","toLocaleLowerCase","window","alert","addConntacts","autoComplete","pattern","title","render","message","ContactsPage","as","p"],"sourceRoot":""}